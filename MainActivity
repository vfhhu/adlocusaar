package com.hyxen.adlocus;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.TextUtils;

import com.google.firebase.iid.FirebaseInstanceId;
import com.hyxen.adlocusaar.AdLocus;
import com.hyxen.adlocusaar.AdLocusHelp;
import com.hyxen.adlocusaar.constants.Constants;
import com.hyxen.adlocusaar.repository.Repository;
import com.hyxen.adlocusaar.repository.remote.RemoteAPI;
import com.hyxen.adlocusaar.util.AdLocusUtil;
import com.hyxen.adlocusaar.util.Log;
import com.hyxen.adlocusaar.utils.Base64;
import com.hyxen.adlocusaar.utils.LbsChecker;
import com.hyxen.adlocusaar.utils.Logger;
import com.hyxen.adlocusaar.utils.RSAUtils;
import com.hyxen.adlocusaar.view.main.AdLocusActivity;
import com.hyxen.adlocusaar.view.main.AdLocusContract;

import org.jetbrains.annotations.NotNull;
import org.json.JSONObject;

import java.io.IOException;
import java.util.Collection;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class MainActivity extends AppCompatActivity  {

    private static final int TAG_LOCATION = 100;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED
                && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
            String token = FirebaseInstanceId.getInstance().getToken();
            AdLocus.getInstance(this)
                    .checkUserStatement(!TextUtils.isEmpty(token) ? token : "",
                            getString(R.string.fcm_app_key), getPackageName(), getString(R.string.app_key));
        } else {
            ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, TAG_LOCATION);
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           String permissions[], int[] grantResults) {
        switch (requestCode) {
            case TAG_LOCATION: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    // permission was granted, yay! Do the
                    // contacts-related task you need to do.
                    String token = FirebaseInstanceId.getInstance().getToken();
                    AdLocus.getInstance(this)
                            .checkUserStatement(!TextUtils.isEmpty(token) ? token : "",
                                    getString(R.string.fcm_app_key), getPackageName(), getString(R.string.app_key));
                } else {
                    String token = FirebaseInstanceId.getInstance().getToken();
                    AdLocus.getInstance(this)
                            .checkUserStatement(!TextUtils.isEmpty(token) ? token : "",
                                    getString(R.string.fcm_app_key), getPackageName(), getString(R.string.app_key));
                }
                return;
            }
        }
    }
}
